<#@ import namespace="System.Collections" #>
<#@ assembly name="uNhAddIns.dll" #>
<#@ import namespace="uNhAddIns.Inflector" #>

<#+
public class NewControllerTemplate : BaseTemplate
{
	public NewControllerTemplate(string solutionName, EntityScaffoldingDetails entityScaffoldingDetails) 
		: base(solutionName, entityScaffoldingDetails) { }

	protected override void RenderCore()
	{
#>
using System;
using System.Web.Mvc;
using DecisionesInteligentes.Colef.Sia.ApplicationServices;
using DecisionesInteligentes.Colef.Sia.Core;
using DecisionesInteligentes.Colef.Sia.Web.Controllers.Helpers;
using DecisionesInteligentes.Colef.Sia.Web.Controllers.Mappers;
using DecisionesInteligentes.Colef.Sia.Web.Controllers.Models;
using DecisionesInteligentes.Colef.Sia.Web.Controllers.ViewData;
using SharpArch.Core.CommonValidator;
using SharpArch.Web.NHibernate;

namespace DecisionesInteligentes.Colef.Sia.Web.Controllers
{
    [HandleError]
    public class <#= EntityScaffoldingDetails.EntityName #>Controller : BaseController<<#= EntityScaffoldingDetails.EntityName #>, <#= EntityScaffoldingDetails.EntityName #>Form>
    {
		readonly I<#= EntityScaffoldingDetails.EntityName #>Service <#= EntityScaffoldingDetails.EntityNameCamelCase #>Service;
        readonly I<#= EntityScaffoldingDetails.EntityName #>Mapper <#= EntityScaffoldingDetails.EntityNameCamelCase #>Mapper;
        readonly ICatalogoService catalogoService;
        <#+ 
        foreach (EntityProperty property in EntityScaffoldingDetails.EntityProperties) {
			if(property.CatalogName != null){
				SpanishInflector spanishInflector = new SpanishInflector();
				string camelize = spanishInflector.Camelize(property.CatalogName);
				
				WriteLine("readonly I" + property.CatalogName + "Mapper " + camelize + "Mapper;");
			}
			if(property.TypeName.Contains("IList")){
				SpanishInflector spanishInflector = new SpanishInflector();
				string typeName = property.TypeName.Remove(property.TypeName.Length - 1).Substring(6);
				string camelizeTypeName = spanishInflector.Camelize(typeName);
				string camelize = spanishInflector.Camelize(property.CatalogName);
				
				WriteLine("readonly I" + typeName + "Mapper " + camelizeTypeName + "Mapper;");
			}
		}
		#>
        
    
        public <#= EntityScaffoldingDetails.EntityName #>Controller(I<#= EntityScaffoldingDetails.EntityName #>Service <#= EntityScaffoldingDetails.EntityNameCamelCase #>Service, 
			I<#= EntityScaffoldingDetails.EntityName #>Mapper <#= EntityScaffoldingDetails.EntityNameCamelCase #>Mapper, 
			ICatalogoService catalogoService, IUsuarioService usuarioService, ISearchService searchService
			<#+ 
			foreach (EntityProperty property in EntityScaffoldingDetails.EntityProperties) {
				if(property.CatalogName != null){
					SpanishInflector spanishInflector = new SpanishInflector();
					string camelize = spanishInflector.Camelize(property.CatalogName);
					
					WriteLine(", I" + property.CatalogName + "Mapper " + camelize + "Mapper");
				}
				if(property.TypeName.Contains("IList")){
					SpanishInflector spanishInflector = new SpanishInflector();
					string typeName = property.TypeName.Remove(property.TypeName.Length - 1).Substring(6);
					string camelizeTypeName = spanishInflector.Camelize(typeName);
					string camelize = spanishInflector.Camelize(property.CatalogName);
					
					WriteLine(", I" + typeName + "Mapper " + camelizeTypeName + "Mapper");
				}
			}
			#>
			) : base(usuarioService, searchService, catalogoService)
        {
			this.catalogoService = catalogoService;
            this.<#= EntityScaffoldingDetails.EntityNameCamelCase #>Service = <#= EntityScaffoldingDetails.EntityNameCamelCase #>Service;
            this.<#= EntityScaffoldingDetails.EntityNameCamelCase #>Mapper = <#= EntityScaffoldingDetails.EntityNameCamelCase #>Mapper;
			<#+ 
			foreach (EntityProperty property in EntityScaffoldingDetails.EntityProperties) {
				if(property.CatalogName != null){
					SpanishInflector spanishInflector = new SpanishInflector();
					string camelize = spanishInflector.Camelize(property.CatalogName);
					
					WriteLine("this." + camelize + "Mapper = " + camelize + "Mapper;");
				}
				if(property.TypeName.Contains("IList")){
					SpanishInflector spanishInflector = new SpanishInflector();
					string typeName = property.TypeName.Remove(property.TypeName.Length - 1).Substring(6);
					string camelizeTypeName = spanishInflector.Camelize(typeName);
					string camelize = spanishInflector.Camelize(property.CatalogName);
					
					WriteLine("this." + camelizeTypeName + "Mapper = " + camelizeTypeName + "Mapper;");
				}
			}
			#>
        }

        [AcceptVerbs(HttpVerbs.Get)]
        public ActionResult Index() 
        {
			var data = CreateViewDataWithTitle(Title.Index);
			
			var <#= EntityScaffoldingDetails.EntityNamePluralCamelCase #> = <#= EntityScaffoldingDetails.EntityNameCamelCase #>Service.GetAll<#= EntityScaffoldingDetails.EntityNamePlural #>();
            data.List = <#= EntityScaffoldingDetails.EntityNameCamelCase #>Mapper.Map(<#= EntityScaffoldingDetails.EntityNamePluralCamelCase #>);

            return View(data);
        }
        
        [AcceptVerbs(HttpVerbs.Get)]
        public ActionResult New()
        {			
			var data = CreateViewDataWithTitle(Title.New);
            data.Form = SetupNewForm();

            return View(data);
        }
        
        [AcceptVerbs(HttpVerbs.Get)]
        public ActionResult Edit(int id)
        {
            var data = CreateViewDataWithTitle(Title.Edit);

            var <#= EntityScaffoldingDetails.EntityNameCamelCase #> = <#= EntityScaffoldingDetails.EntityNameCamelCase #>Service.Get<#= EntityScaffoldingDetails.EntityName #>ById(id);
            
            <#+ if(!EntityScaffoldingDetails.HasAnyCatalogNames){ #>
			data.Form = <#= EntityScaffoldingDetails.EntityNameCamelCase #>Mapper.Map(<#= EntityScaffoldingDetails.EntityNameCamelCase #>);
            <#+ } else { #>
            
            var <#= EntityScaffoldingDetails.EntityNameCamelCase #>Form = <#= EntityScaffoldingDetails.EntityNameCamelCase #>Mapper.Map(<#= EntityScaffoldingDetails.EntityNameCamelCase #>);

            data.Form = SetupNewForm(<#= EntityScaffoldingDetails.EntityNameCamelCase #>Form);

            FormSetCombos(data.Form);
            <#+ } #>

			ViewData.Model = data;
            return View();
        }

        [AcceptVerbs(HttpVerbs.Get)]
        public ActionResult Show(int id)
        {
            var data = CreateViewDataWithTitle(Title.Show);

            var <#= EntityScaffoldingDetails.EntityNameCamelCase #> = <#= EntityScaffoldingDetails.EntityNameCamelCase #>Service.Get<#= EntityScaffoldingDetails.EntityName #>ById(id);
            data.Form = <#= EntityScaffoldingDetails.EntityNameCamelCase #>Mapper.Map(<#= EntityScaffoldingDetails.EntityNameCamelCase #>);
            
            ViewData.Model = data;
            return View();
        }
        
        [CustomTransaction]
        [ValidateAntiForgeryToken]
        [AcceptVerbs(HttpVerbs.Post)]
        public ActionResult Create(<#= EntityScaffoldingDetails.EntityName #>Form form)
        {
            var <#= EntityScaffoldingDetails.EntityNameCamelCase #> = <#= EntityScaffoldingDetails.EntityNameCamelCase #>Mapper.Map(form);
            
            <#= EntityScaffoldingDetails.EntityNameCamelCase #>.CreadorPor = CurrentUser();
            <#= EntityScaffoldingDetails.EntityNameCamelCase #>.ModificadoPor = CurrentUser();

            if (!IsValidateModel(<#= EntityScaffoldingDetails.EntityNameCamelCase #>, form, Title.New, "<#= EntityScaffoldingDetails.EntityName #>"))
            {
                ((GenericViewData<<#= EntityScaffoldingDetails.EntityName #>Form>)ViewData.Model).Form = SetupNewForm();
                return ViewNew();
            }

            <#= EntityScaffoldingDetails.EntityNameCamelCase #>Service.Save<#= EntityScaffoldingDetails.EntityName #>(<#= EntityScaffoldingDetails.EntityNameCamelCase #>);

            return RedirectToIndex(String.Format("<#= EntityScaffoldingDetails.EntityName #> {0} ha sido creado", "<#= EntityScaffoldingDetails.EntityNameCamelCase #>.Nombre"));
        }
        
        [CustomTransaction]
        [ValidateAntiForgeryToken]
        [AcceptVerbs(HttpVerbs.Post)]
        public ActionResult Update(<#= EntityScaffoldingDetails.EntityName #>Form form)
        {
            var <#= EntityScaffoldingDetails.EntityNameCamelCase #> = <#= EntityScaffoldingDetails.EntityNameCamelCase #>Mapper.Map(form);
            
            <#= EntityScaffoldingDetails.EntityNameCamelCase #>.ModificadoPor = CurrentUser();
            
			<#+ if(!EntityScaffoldingDetails.HasAnyCatalogNames){ #>
            if (!IsValidateModel(<#= EntityScaffoldingDetails.EntityNameCamelCase #>, form, Title.Edit))
                return ViewEdit();
            <#+ } else { #>
            if (!IsValidateModel(<#= EntityScaffoldingDetails.EntityNameCamelCase #>, form, Title.Edit))
            {
                var <#= EntityScaffoldingDetails.EntityNameCamelCase #>Form = <#= EntityScaffoldingDetails.EntityNameCamelCase #>Mapper.Map(<#= EntityScaffoldingDetails.EntityNameCamelCase #>);

                ((GenericViewData<<#= EntityScaffoldingDetails.EntityName #>Form>)ViewData.Model).Form = SetupNewForm(<#= EntityScaffoldingDetails.EntityNameCamelCase #>Form);
                FormSetCombos(<#= EntityScaffoldingDetails.EntityNameCamelCase #>Form);
                return ViewEdit();
            }
            <#+ } #>

            <#= EntityScaffoldingDetails.EntityNameCamelCase #>Service.Save<#= EntityScaffoldingDetails.EntityName #>(<#= EntityScaffoldingDetails.EntityNameCamelCase #>);

            return RedirectToIndex(String.Format("<#= EntityScaffoldingDetails.EntityName #> {0} ha sido modificado", "<#= EntityScaffoldingDetails.EntityNameCamelCase #>.Nombre"));
        }
        
        [CustomTransaction]
        [AcceptVerbs(HttpVerbs.Put)]
        public ActionResult Activate(int id)
        {            
            var <#= EntityScaffoldingDetails.EntityNameCamelCase #> = <#= EntityScaffoldingDetails.EntityNameCamelCase #>Service.Get<#= EntityScaffoldingDetails.EntityName #>ById(id);
            <#= EntityScaffoldingDetails.EntityNameCamelCase #>.Activo = true;
            <#= EntityScaffoldingDetails.EntityNameCamelCase #>.ModificadoPor = CurrentUser();
            <#= EntityScaffoldingDetails.EntityNameCamelCase #>Service.Save<#= EntityScaffoldingDetails.EntityName #>(<#= EntityScaffoldingDetails.EntityNameCamelCase #>);

            var form = <#= EntityScaffoldingDetails.EntityNameCamelCase #>Mapper.Map(<#= EntityScaffoldingDetails.EntityNameCamelCase #>);
            
            return Rjs(form);
        }
        
        [CustomTransaction]
        [AcceptVerbs(HttpVerbs.Put)]
        public ActionResult Deactivate(int id)
        {
            var <#= EntityScaffoldingDetails.EntityNameCamelCase #> = <#= EntityScaffoldingDetails.EntityNameCamelCase #>Service.Get<#= EntityScaffoldingDetails.EntityName #>ById(id);
            <#= EntityScaffoldingDetails.EntityNameCamelCase #>.Activo = false;
            <#= EntityScaffoldingDetails.EntityNameCamelCase #>.ModificadoPor = CurrentUser();
            <#= EntityScaffoldingDetails.EntityNameCamelCase #>Service.Save<#= EntityScaffoldingDetails.EntityName #>(<#= EntityScaffoldingDetails.EntityNameCamelCase #>);

            var form = <#= EntityScaffoldingDetails.EntityNameCamelCase #>Mapper.Map(<#= EntityScaffoldingDetails.EntityNameCamelCase #>);
            
            return Rjs("Activate", form);
        }
        
        [AcceptVerbs(HttpVerbs.Get)]
        public override ActionResult Search(string q)
        {
            var data = searchService.Search<<#= EntityScaffoldingDetails.EntityName #>>(x => x.Nombre, q);
            return Content(data);
        }
        
		<#+ 
		foreach (EntityProperty property in EntityScaffoldingDetails.EntityProperties) {
			if(property.TypeName.Contains("IList")){
				SpanishInflector spanishInflector = new SpanishInflector();
				string typeName = property.TypeName.Remove(property.TypeName.Length - 1).Substring(6);
				string camelizeTypeName = spanishInflector.Camelize(typeName);
				string catalogName = property.CatalogName;
				string titleize = spanishInflector.Titleize(catalogName);				
				string[] addName = titleize.Split(' ');
				
				catalogName = "";
				foreach(string name in addName){
					catalogName += spanishInflector.Pluralize(name);
				}
				#>
        [AcceptVerbs(HttpVerbs.Get)]
        public ActionResult New<#= property.CatalogName #>(int id)
        {
            var <#= EntityScaffoldingDetails.EntityNameCamelCase #> = <#= EntityScaffoldingDetails.EntityNameCamelCase #>Service.Get<#= EntityScaffoldingDetails.EntityName #>ById(id);
            var form = new <#= EntityScaffoldingDetails.EntityName #>Form();

            if (<#= EntityScaffoldingDetails.EntityNameCamelCase #> != null)
                form.Id = <#= EntityScaffoldingDetails.EntityNameCamelCase #>.Id;

            form.<#= typeName #> = new <#= typeName #>Form();
            form.<#= catalogName #> = <#= camelizeTypeName #>Mapper.Map(catalogoService.GetActive<#= catalogName #>());

            return Rjs("New<#= property.CatalogName #>", form);
        }

        [CustomTransaction]
        [AcceptVerbs(HttpVerbs.Post)]
        public ActionResult Add<#= property.CatalogName #>([Bind(Prefix = "<#= typeName #>")]<#= typeName #>Form form, int <#= EntityScaffoldingDetails.EntityNameCamelCase #>Id)
        {
            var <#= camelizeTypeName #> = <#= camelizeTypeName #>Mapper.Map(form);

            ModelState.AddModelErrors(<#= camelizeTypeName #>.ValidationResults(), true, String.Empty);
            if (!ModelState.IsValid)
            {
                return Rjs("ModelError");
            }

            <#= camelizeTypeName #>.CreadorPor = CurrentUser();
            <#= camelizeTypeName #>.ModificadoPor = CurrentUser();

            if (<#= EntityScaffoldingDetails.EntityNameCamelCase #>Id != 0)
            {
                var <#= EntityScaffoldingDetails.EntityNameCamelCase #> = <#= EntityScaffoldingDetails.EntityNameCamelCase #>Service.Get<#= EntityScaffoldingDetails.EntityName #>ById(<#= EntityScaffoldingDetails.EntityNameCamelCase #>Id);
                <#= EntityScaffoldingDetails.EntityNameCamelCase #>.Add<#= property.CatalogName #>(<#= camelizeTypeName #>);
                <#= EntityScaffoldingDetails.EntityNameCamelCase #>Service.Save<#= EntityScaffoldingDetails.EntityName #>(<#= EntityScaffoldingDetails.EntityNameCamelCase #>);
            }

            var <#= camelizeTypeName #>Form = <#= camelizeTypeName #>Mapper.Map(<#= camelizeTypeName #>);

            return Rjs("Add<#= property.CatalogName #>", <#= camelizeTypeName #>Form);
        }
		<#+	}
		}
		#>
        
        
        <#+ if(!EntityScaffoldingDetails.HasAnyCatalogNames){ #>
        <#= EntityScaffoldingDetails.EntityName #>Form SetupNewForm()
        {
            return new <#= EntityScaffoldingDetails.EntityName #>Form
            {
            
				<#+ 
				foreach (EntityProperty property in EntityScaffoldingDetails.EntityProperties) {
					if(property.TypeName.Contains("IList")){
						SpanishInflector spanishInflector = new SpanishInflector();
						string typeName = property.TypeName.Remove(property.TypeName.Length - 1).Substring(6);
						WriteLine(typeName + " = new " + typeName + "Form(),");
					}
				}
				#>
                
                //Lista de Catalogos Pendientes
                <#+ 
          		foreach (EntityProperty property in EntityScaffoldingDetails.EntityProperties) {
					if(property.CatalogName != null){
						SpanishInflector spanishInflector = new SpanishInflector();
						string camelize = spanishInflector.Camelize(property.CatalogName);
						
						string catalogName = property.CatalogName;
						string titleize = spanishInflector.Titleize(catalogName);				
						string[] addName = titleize.Split(' ');
				
						catalogName = "";
						foreach(string name in addName){
							catalogName += spanishInflector.Pluralize(name);
						}
						
						WriteLine(catalogName + " = " + camelize + "Mapper.Map(catalogoService.GetActive" + catalogName + "()),");
					}
				}
				#>
            };
        }
        <#+ } else { #>
        
        <#= EntityScaffoldingDetails.EntityName #>Form SetupNewForm()
        {
            return SetupNewForm(null);
        }
        
        <#= EntityScaffoldingDetails.EntityName #>Form SetupNewForm(<#= EntityScaffoldingDetails.EntityName #>Form form)
        {
			form = form ?? new <#= EntityScaffoldingDetails.EntityName #>Form();
            
				<#+ 
				foreach (EntityProperty property in EntityScaffoldingDetails.EntityProperties) {
					if(property.TypeName.Contains("IList")){
						SpanishInflector spanishInflector = new SpanishInflector();
						string typeName = property.TypeName.Remove(property.TypeName.Length - 1).Substring(6);
						WriteLine("form." + typeName + " = new " + typeName + "Form();");
					}
				}
				#>
                
                //Lista de Catalogos Pendientes
                <#+ 
          		foreach (EntityProperty property in EntityScaffoldingDetails.EntityProperties) {
					if(property.CatalogName != null){
						SpanishInflector spanishInflector = new SpanishInflector();
						string camelize = spanishInflector.Camelize(property.CatalogName);
						
						string catalogName = property.CatalogName;
						string titleize = spanishInflector.Titleize(catalogName);				
						string[] addName = titleize.Split(' ');
				
						catalogName = "";
						foreach(string name in addName){
							catalogName += spanishInflector.Pluralize(name);
						}
						
						WriteLine("form." + catalogName + " = " + camelize + "Mapper.Map(catalogoService.GetActive" + catalogName + "());");
					}
				}
				#>
			return form;
        }
        
        private void FormSetCombos(<#= EntityScaffoldingDetails.EntityName #>Form form)
        {
				<#+ 
				foreach (EntityProperty property in EntityScaffoldingDetails.EntityProperties) {
					if(property.CatalogName != null && !property.TypeName.Contains("IList")){ #>
					ViewData["<#= property.TypeName #>"] = form.<#= property.TypeName#>Id;
				<#+	}
				}
				#>
        }
        <#+ } #>
    }
}
<#+
	}
}
#>
